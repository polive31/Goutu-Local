<?php


 
// Block direct requests
if ( !defined('ABSPATH') )
	die('-1');


/*
WP Widget Categories 
---------------------------------------------------------------------------------------------------- */

/**
 * Widget API: WP_Widget_Categories class
 *
 * @package WordPress
 * @subpackage Widgets
 * @since 4.4.0
 */

/**
 * Core class used to implement a Categories widget.
 *
 * @since 2.8.0
 *
 * @see WP_Widget
 */
//class WP_Widget_DD_Menu extends WP_Widget {
//
//	/**
//	 * Sets up a new drop down menu widget instance.
//	 *
//	 * @since 2.8.0
//	 * @access public
//	 */
//	public function __construct() {
//		$widget_ops = array(
//			'classname' => 'widget_dd_menu',
//			'description' => __( 'A dropdown of a given menu.' ),
//			'customize_selective_refresh' => true,
//		);
//		parent::__construct( 'categories', __( 'Categories' ), $widget_ops );
//	}
//
//	/**
//	 * Outputs the content for the current Categories widget instance.
//	 *
//	 * @since 2.8.0
//	 * @access public
//	 *
//	 * @param array $args     Display arguments including 'before_title', 'after_title',
//	 *                        'before_widget', and 'after_widget'.
//	 * @param array $instance Settings for the current Categories widget instance.
//	 */
//	public function widget( $args, $instance ) {
//		static $first_dropdown = true;
//
//		$title = apply_filters( 'widget_title', empty( $instance['title'] ) ? __( 'Categories' ) : $instance['title'], $instance, $this->id_base );
//
//		$c = ! empty( $instance['count'] ) ? '1' : '0';
//		$h = ! empty( $instance['hierarchical'] ) ? '1' : '0';
//		$d = ! empty( $instance['dropdown'] ) ? '1' : '0';
//
//		echo $args['before_widget'];
//		if ( $title ) {
//			echo $args['before_title'] . $title . $args['after_title'];
//		}
//
//		$cat_args = array(
//			'orderby'      => 'name',
//			'show_count'   => $c,
//			'hierarchical' => $h
//		);
//
//		if ( $d ) {
//			$dropdown_id = ( $first_dropdown ) ? 'cat' : "{$this->id_base}-dropdown-{$this->number}";
//			$first_dropdown = false;
//
//			echo '<label class="screen-reader-text" for="' . esc_attr( $dropdown_id ) . '">' . $title . '</label>';
//
//			$cat_args['show_option_none'] = __( 'Select Category' );
//			$cat_args['id'] = $dropdown_id;
//
//			/**
//			 * Filters the arguments for the Categories widget drop-down.
//			 *
//			 * @since 2.8.0
//			 *
//			 * @see wp_dropdown_categories()
//			 *
//			 * @param array $cat_args An array of Categories widget drop-down arguments.
//			 */
//			wp_dd_menu( apply_filters( 'widget_categories_dropdown_args', $cat_args ) );
//			?>
//
// <script type='text/javascript'>
///* <![CDATA[ */
//(function() {
//	var dropdown = document.getElementById( "<?php echo esc_js( $dropdown_id ); ?>" );
//	function onCatChange() {
//		if ( dropdown.options[ dropdown.selectedIndex ].value > 0 ) {
//			location.href = "<?php echo home_url(); ?>/?cat=" + dropdown.options[ dropdown.selectedIndex ].value;
//		}
//	}
//	dropdown.onchange = onCatChange;
//})();
///* ]]> */
//</script>
//
//<?php
//		} else {
//?>
//		<ul>
//<?php
//		$cat_args['title_li'] = '';
//
//		/**
//		 * Filters the arguments for the Categories widget.
//		 *
//		 * @since 2.8.0
//		 *
//		 * @param array $cat_args An array of Categories widget options.
//		 */
//		wp_list_categories( apply_filters( 'widget_categories_args', $cat_args ) );
//?>
//		</ul>
// <?php
//		}
//
//		echo $args['after_widget'];
//	}
//
//	/**
//	 * Handles updating settings for the current Categories widget instance.
//	 *
//	 * @since 2.8.0
//	 * @access public
//	 *
//	 * @param array $new_instance New settings for this instance as input by the user via
//	 *                            WP_Widget::form().
//	 * @param array $old_instance Old settings for this instance.
//	 * @return array Updated settings to save.
//	 */
//	public function update( $new_instance, $old_instance ) {
//		$instance = $old_instance;
//		$instance['title'] = sanitize_text_field( $new_instance['title'] );
//		$instance['count'] = !empty($new_instance['count']) ? 1 : 0;
//		$instance['hierarchical'] = !empty($new_instance['hierarchical']) ? 1 : 0;
//		$instance['dropdown'] = !empty($new_instance['dropdown']) ? 1 : 0;
//
//		return $instance;
//	}
//
//	/**
//	 * Outputs the settings form for the Categories widget.
//	 *
//	 * @since 2.8.0
//	 * @access public
//	 *
//	 * @param array $instance Current settings.
//	 */
//	public function form( $instance ) {
//		//Defaults
//		$instance = wp_parse_args( (array) $instance, array( 'title' => '') );
//		$title = sanitize_text_field( $instance['title'] );
//		$count = isset($instance['count']) ? (bool) $instance['count'] :false;
//		$hierarchical = isset( $instance['hierarchical'] ) ? (bool) $instance['hierarchical'] : false;
//		$dropdown = isset( $instance['dropdown'] ) ? (bool) $instance['dropdown'] : false;
//		?>
//		<p><label for="<?php echo $this->get_field_id('title'); ?>"><?php _e( 'Title:' ); ?></label>
//		<input class="widefat" id="<?php echo $this->get_field_id('title'); ?>" name="<?php echo $this->get_field_name('title'); ?>" type="text" value="<?php echo esc_attr( $title ); ?>" /></p>
//
//		<p><input type="checkbox" class="checkbox" id="<?php echo $this->get_field_id('dropdown'); ?>" name="<?php echo $this->get_field_name('dropdown'); ?>"<?php checked( $dropdown ); ?> />
//		<label for="<?php echo $this->get_field_id('dropdown'); ?>"><?php _e( 'Display as dropdown' ); ?></label><br />
//
//		<input type="checkbox" class="checkbox" id="<?php echo $this->get_field_id('count'); ?>" name="<?php echo $this->get_field_name('count'); ?>"<?php checked( $count ); ?> />
//		<label for="<?php echo $this->get_field_id('count'); ?>"><?php _e( 'Show post counts' ); ?></label><br />
//
//		<input type="checkbox" class="checkbox" id="<?php echo $this->get_field_id('hierarchical'); ?>" name="<?php echo $this->get_field_name('hierarchical'); ?>"<?php checked( $hierarchical ); ?> />
//		<label for="<?php echo $this->get_field_id('hierarchical'); ?>"><?php _e( 'Show hierarchy' ); ?></label></p>
//		<?php
//	}
//
//}



/*
WP Dropdown Menu Widget
---------------------------------------------------------------------------------------------------- */	
	
add_action( 'widgets_init', function(){
     register_widget( 'WP_Dropdown_Menu_Widget' );
});	

/**
 * Core class used to implement the Custom Menu widget.
 *
 * @since 3.0.0
 *
 * @see WP_Widget
 */
class WP_Dropdown_Menu_Widget extends WP_Widget {

	/**
	 * Sets up a new Custom Menu widget instance.
	 *
	 * @since 3.0.0
	 * @access public
	 */
	public function __construct() {
		$widget_ops = array(
			'description' => __( 'Add a custom dropdown menu to your sidebar.' ),
			'customize_selective_refresh' => true,
		);
		parent::__construct( 'nav_menu', __('Custom Menu'), $widget_ops );
	}

	/**
	 * Outputs the content for the current Custom Menu widget instance.
	 *
	 * @since 3.0.0
	 * @access public
	 *
	 * @param array $args     Display arguments including 'before_title', 'after_title',
	 *                        'before_widget', and 'after_widget'.
	 * @param array $instance Settings for the current Custom Menu widget instance.
	 */
	public function widget( $args, $instance ) {
		// Get menu
		$nav_menu = ! empty( $instance['nav_menu'] ) ? wp_get_nav_menu_object( $instance['nav_menu'] ) : false;

		if ( !$nav_menu )
			return;

		/** This filter is documented in wp-includes/widgets/class-wp-widget-pages.php */
		$instance['title'] = apply_filters( 'widget_title', empty( $instance['title'] ) ? '' : $instance['title'], $instance, $this->id_base );

		echo $args['before_widget'];

		if ( !empty($instance['title']) )
			echo $args['before_title'] . $instance['title'] . $args['after_title'];

		$nav_menu_args = array(
			'fallback_cb' => '',
			'menu'        => $nav_menu
		);

		/**
		 * Filters the arguments for the Custom Menu widget.
		 *
		 * @since 4.2.0
		 * @since 4.4.0 Added the `$instance` parameter.
		 *
		 * @param array    $nav_menu_args {
		 *     An array of arguments passed to wp_nav_menu() to retrieve a custom menu.
		 *
		 *     @type callable|bool $fallback_cb Callback to fire if the menu doesn't exist. Default empty.
		 *     @type mixed         $menu        Menu ID, slug, or name.
		 * }
		 * @param stdClass $nav_menu      Nav menu object for the current menu.
		 * @param array    $args          Display arguments for the current widget.
		 * @param array    $instance      Array of settings for the current widget.
		 */
		wp_nav_menu( apply_filters( 'widget_nav_menu_args', $nav_menu_args, $nav_menu, $args, $instance ) );

		echo $args['after_widget'];
	}

	/**
	 * Handles updating settings for the current Custom Menu widget instance.
	 *
	 * @since 3.0.0
	 * @access public
	 *
	 * @param array $new_instance New settings for this instance as input by the user via
	 *                            WP_Widget::form().
	 * @param array $old_instance Old settings for this instance.
	 * @return array Updated settings to save.
	 */
	public function update( $new_instance, $old_instance ) {
		$instance = array();
		if ( ! empty( $new_instance['title'] ) ) {
			$instance['title'] = sanitize_text_field( $new_instance['title'] );
		}
		if ( ! empty( $new_instance['nav_menu'] ) ) {
			$instance['nav_menu'] = (int) $new_instance['nav_menu'];
		}
		return $instance;
	}

	/**
	 * Outputs the settings form for the Custom Menu widget.
	 *
	 * @since 3.0.0
	 * @access public
	 *
	 * @param array $instance Current settings.
	 * @global WP_Customize_Manager $wp_customize
	 */
	public function form( $instance ) {
		global $wp_customize;
		$title = isset( $instance['title'] ) ? $instance['title'] : '';
		$nav_menu = isset( $instance['nav_menu'] ) ? $instance['nav_menu'] : '';

		// Get menus
		$menus = wp_get_nav_menus();

		// If no menus exists, direct the user to go and create some.
		?>
		<p class="nav-menu-widget-no-menus-message" <?php if ( ! empty( $menus ) ) { echo ' style="display:none" '; } ?>>
			<?php
			if ( $wp_customize instanceof WP_Customize_Manager ) {
				$url = 'javascript: wp.customize.panel( "nav_menus" ).focus();';
			} else {
				$url = admin_url( 'nav-menus.php' );
			}
			?>
			<?php echo sprintf( __( 'No menus have been created yet. <a href="%s">Create some</a>.' ), esc_attr( $url ) ); ?>
		</p>
		<div class="nav-menu-widget-form-controls" <?php if ( empty( $menus ) ) { echo ' style="display:none" '; } ?>>
			<p>
				<label for="<?php echo $this->get_field_id( 'title' ); ?>"><?php _e( 'Title:' ) ?></label>
				<input type="text" class="widefat" id="<?php echo $this->get_field_id( 'title' ); ?>" name="<?php echo $this->get_field_name( 'title' ); ?>" value="<?php echo esc_attr( $title ); ?>"/>
			</p>
			<p>
				<label for="<?php echo $this->get_field_id( 'nav_menu' ); ?>"><?php _e( 'Select Menu:' ); ?></label>
				<select id="<?php echo $this->get_field_id( 'nav_menu' ); ?>" name="<?php echo $this->get_field_name( 'nav_menu' ); ?>">
					<option value="0"><?php _e( '&mdash; Select &mdash;' ); ?></option>
					<?php foreach ( $menus as $menu ) : ?>
						<option value="<?php echo esc_attr( $menu->term_id ); ?>" <?php selected( $nav_menu, $menu->term_id ); ?>>
							<?php echo esc_html( $menu->name ); ?>
						</option>
					<?php endforeach; ?>
				</select>
			</p>
			<?php if ( $wp_customize instanceof WP_Customize_Manager ) : ?>
				<p class="edit-selected-nav-menu" style="<?php if ( ! $nav_menu ) { echo 'display: none;'; } ?>">
					<button type="button" class="button"><?php _e( 'Edit Menu' ) ?></button>
				</p>
			<?php endif; ?>
		</div>
		<?php
	}
}






/*
Dropdown Page List Widget
---------------------------------------------------------------------------------------------------- */


add_action( 'widgets_init', function(){
     register_widget( 'Dropdown_Page_List_Widget' );
});	

// Creating the widget 
class dropdown_page_list_widget extends WP_Widget {

function __construct() {
parent::__construct(
// Base ID of your widget
'dropdown_page_list_widget', 

// Widget name will appear in UI
__('Dropdown Page List Widget', 'foodiepro'), /*$widget_ops ???*/

// Widget description
array( 'description' => __( 'Displays a dropdown list child pages', 'foodiepro' ), ) 
);
}

// Creating widget front-end
public function widget( $args, $instance ) {
$title = apply_filters( 'widget_title', $instance['title'] );
// before and after widget arguments are defined by themes
echo $args['before_widget'];
if ( ! empty( $title ) )
echo $args['before_title'] . $title . $args['after_title'];


//echo '<form action="' . bloginfo('url') . '" method="get">';
echo '<form action="" method="get">';

	$dropdown_page_args = array(
					'depth'						=> 1,
					'child_of'				=> 9252,
					'selected'				=> 9246,
					'echo'						=> 1,
					'sort_column'     => 'menu_order',
	    );

	$select = wp_dropdown_pages( $dropdown_args );

echo '</form>';
?>

<script type='text/javascript'>
/* <![CDATA[ */
(function() {
	var dropdown = document.getElementById( "<?php echo esc_js( $select ); ?>" );
	function onPageChange() {
		if ( dropdown.options[ dropdown.selectedIndex ].value > 0 ) {
			location.href = "<?php echo home_url(); ?>/themes/?cat=" + dropdown.options[ dropdown.selectedIndex ].value;
		}
	}
	dropdown.onchange = onPageChange;
})();
/* ]]> */
</script>


<?php 
// Output end
echo $args['after_widget'];
}
		
// Widget Backend 
public function form( $instance ) {
if ( isset( $instance[ 'title' ] ) ) {
$title = $instance[ 'title' ];
}
else {
$title = __( 'New title', 'foodiepro' );
}
// Widget admin form
?>
<p>
<label for="<?php echo $this->get_field_id( 'title' ); ?>"><?php _e( 'Title:' ); ?></label> 
<input class="widefat" id="<?php echo $this->get_field_id( 'title' ); ?>" name="<?php echo $this->get_field_name( 'title' ); ?>" type="text" value="<?php echo esc_attr( $title ); ?>" />
</p>
<?php 
}
	
// Updating widget replacing old instances with new
public function update( $new_instance, $old_instance ) {
$instance = array();
$instance['title'] = ( ! empty( $new_instance['title'] ) ) ? strip_tags( $new_instance['title'] ) : '';
return $instance;
}
} // Class wpb_widget ends here

// Register and load the widget
function wpb_load_widget() {
	register_widget( 'dropdown_page_list_widget' );
}
add_action( 'widgets_init', 'wpb_load_widget' );


